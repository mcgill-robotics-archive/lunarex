/* Auto-generated by genmsg_cpp for file /home/ernie/McGill_LunarEx_2013/ROS_workspace/corner_detector/srv/corner_detector.srv */
#ifndef CORNER_DETECTOR_SERVICE_CORNER_DETECTOR_H
#define CORNER_DETECTOR_SERVICE_CORNER_DETECTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "nav_msgs/MapMetaData.h"
#include "nav_msgs/OccupancyGrid.h"



namespace corner_detector
{
template <class ContainerAllocator>
struct corner_detectorRequest_ {
  typedef corner_detectorRequest_<ContainerAllocator> Type;

  corner_detectorRequest_()
  : map_meta()
  , map()
  {
  }

  corner_detectorRequest_(const ContainerAllocator& _alloc)
  : map_meta(_alloc)
  , map(_alloc)
  {
  }

  typedef  ::nav_msgs::MapMetaData_<ContainerAllocator>  _map_meta_type;
   ::nav_msgs::MapMetaData_<ContainerAllocator>  map_meta;

  typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _map_type;
   ::nav_msgs::OccupancyGrid_<ContainerAllocator>  map;


  typedef boost::shared_ptr< ::corner_detector::corner_detectorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corner_detector::corner_detectorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct corner_detectorRequest
typedef  ::corner_detector::corner_detectorRequest_<std::allocator<void> > corner_detectorRequest;

typedef boost::shared_ptr< ::corner_detector::corner_detectorRequest> corner_detectorRequestPtr;
typedef boost::shared_ptr< ::corner_detector::corner_detectorRequest const> corner_detectorRequestConstPtr;


template <class ContainerAllocator>
struct corner_detectorResponse_ {
  typedef corner_detectorResponse_<ContainerAllocator> Type;

  corner_detectorResponse_()
  : lower_left()
  , lower_right()
  , top_left()
  , top_right()
  {
  }

  corner_detectorResponse_(const ContainerAllocator& _alloc)
  : lower_left(_alloc)
  , lower_right(_alloc)
  , top_left(_alloc)
  , top_right(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lower_left_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lower_left;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lower_right_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  lower_right;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _top_left_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  top_left;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _top_right_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  top_right;


  typedef boost::shared_ptr< ::corner_detector::corner_detectorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corner_detector::corner_detectorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct corner_detectorResponse
typedef  ::corner_detector::corner_detectorResponse_<std::allocator<void> > corner_detectorResponse;

typedef boost::shared_ptr< ::corner_detector::corner_detectorResponse> corner_detectorResponsePtr;
typedef boost::shared_ptr< ::corner_detector::corner_detectorResponse const> corner_detectorResponseConstPtr;

struct corner_detector
{

typedef corner_detectorRequest Request;
typedef corner_detectorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct corner_detector
} // namespace corner_detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::corner_detector::corner_detectorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::corner_detector::corner_detectorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::corner_detector::corner_detectorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a6812bd49a91eb54a1ed172b05d9359";
  }

  static const char* value(const  ::corner_detector::corner_detectorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a6812bd49a91eb5ULL;
  static const uint64_t static_value2 = 0x4a1ed172b05d9359ULL;
};

template<class ContainerAllocator>
struct DataType< ::corner_detector::corner_detectorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corner_detector/corner_detectorRequest";
  }

  static const char* value(const  ::corner_detector::corner_detectorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::corner_detector::corner_detectorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
nav_msgs/MapMetaData map_meta\n\
nav_msgs/OccupancyGrid map\n\
\n\
================================================================================\n\
MSG: nav_msgs/MapMetaData\n\
# This hold basic information about the characterists of the OccupancyGrid\n\
\n\
# The time at which the map was loaded\n\
time map_load_time\n\
# The map resolution [m/cell]\n\
float32 resolution\n\
# Map width [cells]\n\
uint32 width\n\
# Map height [cells]\n\
uint32 height\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: nav_msgs/OccupancyGrid\n\
# This represents a 2-D grid map, in which each cell represents the probability of\n\
# occupancy.\n\
\n\
Header header \n\
\n\
#MetaData for the map\n\
MapMetaData info\n\
\n\
# The map data, in row-major order, starting with (0,0).  Occupancy\n\
# probabilities are in the range [0,100].  Unknown is -1.\n\
int8[] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::corner_detector::corner_detectorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::corner_detector::corner_detectorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::corner_detector::corner_detectorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::corner_detector::corner_detectorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b8f0d4aa6433aa8e2d7d6e5f1ee7dcb6";
  }

  static const char* value(const  ::corner_detector::corner_detectorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb8f0d4aa6433aa8eULL;
  static const uint64_t static_value2 = 0x2d7d6e5f1ee7dcb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::corner_detector::corner_detectorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corner_detector/corner_detectorResponse";
  }

  static const char* value(const  ::corner_detector::corner_detectorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::corner_detector::corner_detectorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float32[] lower_left\n\
float32[] lower_right\n\
float32[] top_left\n\
float32[] top_right\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::corner_detector::corner_detectorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::corner_detector::corner_detectorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.map_meta);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct corner_detectorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::corner_detector::corner_detectorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lower_left);
    stream.next(m.lower_right);
    stream.next(m.top_left);
    stream.next(m.top_right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct corner_detectorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<corner_detector::corner_detector> {
  static const char* value() 
  {
    return "6ab07915844f78d653bb02cb6aaed405";
  }

  static const char* value(const corner_detector::corner_detector&) { return value(); } 
};

template<>
struct DataType<corner_detector::corner_detector> {
  static const char* value() 
  {
    return "corner_detector/corner_detector";
  }

  static const char* value(const corner_detector::corner_detector&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<corner_detector::corner_detectorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ab07915844f78d653bb02cb6aaed405";
  }

  static const char* value(const corner_detector::corner_detectorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<corner_detector::corner_detectorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corner_detector/corner_detector";
  }

  static const char* value(const corner_detector::corner_detectorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<corner_detector::corner_detectorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ab07915844f78d653bb02cb6aaed405";
  }

  static const char* value(const corner_detector::corner_detectorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<corner_detector::corner_detectorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corner_detector/corner_detector";
  }

  static const char* value(const corner_detector::corner_detectorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORNER_DETECTOR_SERVICE_CORNER_DETECTOR_H

