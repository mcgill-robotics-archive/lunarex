/* Auto-generated by genmsg_cpp for file /home/seb/McGill_LunarEx_2013/ROS_workspace/corner_detector/msg/Corners.msg */
#ifndef CORNER_DETECTOR_MESSAGE_CORNERS_H
#define CORNER_DETECTOR_MESSAGE_CORNERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace corner_detector
{
template <class ContainerAllocator>
struct Corners_ {
  typedef Corners_<ContainerAllocator> Type;

  Corners_()
  : LR_corner()
  , RR_corner()
  , LF_corner()
  , RF_corner()
  , resolution(0.0)
  , width(0)
  , height(0)
  , left(false)
  , area(0)
  {
  }

  Corners_(const ContainerAllocator& _alloc)
  : LR_corner(_alloc)
  , RR_corner(_alloc)
  , LF_corner(_alloc)
  , RF_corner(_alloc)
  , resolution(0.0)
  , width(0)
  , height(0)
  , left(false)
  , area(0)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _LR_corner_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  LR_corner;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _RR_corner_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  RR_corner;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _LF_corner_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  LF_corner;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _RF_corner_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  RF_corner;

  typedef float _resolution_type;
  float resolution;

  typedef uint32_t _width_type;
  uint32_t width;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef uint8_t _left_type;
  uint8_t left;

  typedef uint32_t _area_type;
  uint32_t area;


  typedef boost::shared_ptr< ::corner_detector::Corners_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::corner_detector::Corners_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Corners
typedef  ::corner_detector::Corners_<std::allocator<void> > Corners;

typedef boost::shared_ptr< ::corner_detector::Corners> CornersPtr;
typedef boost::shared_ptr< ::corner_detector::Corners const> CornersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::corner_detector::Corners_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::corner_detector::Corners_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace corner_detector

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::corner_detector::Corners_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::corner_detector::Corners_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::corner_detector::Corners_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6fa23f0f1b0bdbc6a195e1d2ebdf4067";
  }

  static const char* value(const  ::corner_detector::Corners_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6fa23f0f1b0bdbc6ULL;
  static const uint64_t static_value2 = 0xa195e1d2ebdf4067ULL;
};

template<class ContainerAllocator>
struct DataType< ::corner_detector::Corners_<ContainerAllocator> > {
  static const char* value() 
  {
    return "corner_detector/Corners";
  }

  static const char* value(const  ::corner_detector::Corners_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::corner_detector::Corners_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32[] LR_corner\n\
uint32[] RR_corner\n\
uint32[] LF_corner\n\
uint32[] RF_corner\n\
float32 resolution\n\
uint32 width\n\
uint32 height\n\
bool left\n\
uint32 area\n\
\n\
";
  }

  static const char* value(const  ::corner_detector::Corners_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::corner_detector::Corners_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.LR_corner);
    stream.next(m.RR_corner);
    stream.next(m.LF_corner);
    stream.next(m.RF_corner);
    stream.next(m.resolution);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.left);
    stream.next(m.area);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Corners_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::corner_detector::Corners_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::corner_detector::Corners_<ContainerAllocator> & v) 
  {
    s << indent << "LR_corner[]" << std::endl;
    for (size_t i = 0; i < v.LR_corner.size(); ++i)
    {
      s << indent << "  LR_corner[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.LR_corner[i]);
    }
    s << indent << "RR_corner[]" << std::endl;
    for (size_t i = 0; i < v.RR_corner.size(); ++i)
    {
      s << indent << "  RR_corner[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.RR_corner[i]);
    }
    s << indent << "LF_corner[]" << std::endl;
    for (size_t i = 0; i < v.LF_corner.size(); ++i)
    {
      s << indent << "  LF_corner[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.LF_corner[i]);
    }
    s << indent << "RF_corner[]" << std::endl;
    for (size_t i = 0; i < v.RF_corner.size(); ++i)
    {
      s << indent << "  RF_corner[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.RF_corner[i]);
    }
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "area: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.area);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORNER_DETECTOR_MESSAGE_CORNERS_H

