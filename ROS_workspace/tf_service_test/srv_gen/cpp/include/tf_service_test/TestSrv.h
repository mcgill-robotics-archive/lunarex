/* Auto-generated by genmsg_cpp for file /home/seb/McGill_LunarEx_2013/ROS_workspace/tf_service_test/srv/TestSrv.srv */
#ifndef TF_SERVICE_TEST_SERVICE_TESTSRV_H
#define TF_SERVICE_TEST_SERVICE_TESTSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace tf_service_test
{
template <class ContainerAllocator>
struct TestSrvRequest_ {
  typedef TestSrvRequest_<ContainerAllocator> Type;

  TestSrvRequest_()
  : request(0)
  {
  }

  TestSrvRequest_(const ContainerAllocator& _alloc)
  : request(0)
  {
  }

  typedef int32_t _request_type;
  int32_t request;


  typedef boost::shared_ptr< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_service_test::TestSrvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestSrvRequest
typedef  ::tf_service_test::TestSrvRequest_<std::allocator<void> > TestSrvRequest;

typedef boost::shared_ptr< ::tf_service_test::TestSrvRequest> TestSrvRequestPtr;
typedef boost::shared_ptr< ::tf_service_test::TestSrvRequest const> TestSrvRequestConstPtr;


template <class ContainerAllocator>
struct TestSrvResponse_ {
  typedef TestSrvResponse_<ContainerAllocator> Type;

  TestSrvResponse_()
  : height(0)
  , width(0)
  , kinect_map()
  {
  }

  TestSrvResponse_(const ContainerAllocator& _alloc)
  : height(0)
  , width(0)
  , kinect_map(_alloc)
  {
  }

  typedef int32_t _height_type;
  int32_t height;

  typedef int32_t _width_type;
  int32_t width;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _kinect_map_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  kinect_map;


  typedef boost::shared_ptr< ::tf_service_test::TestSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_service_test::TestSrvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TestSrvResponse
typedef  ::tf_service_test::TestSrvResponse_<std::allocator<void> > TestSrvResponse;

typedef boost::shared_ptr< ::tf_service_test::TestSrvResponse> TestSrvResponsePtr;
typedef boost::shared_ptr< ::tf_service_test::TestSrvResponse const> TestSrvResponseConstPtr;

struct TestSrv
{

typedef TestSrvRequest Request;
typedef TestSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TestSrv
} // namespace tf_service_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf_service_test::TestSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "650f0ccd41c8f8d53ada80be6ddde434";
  }

  static const char* value(const  ::tf_service_test::TestSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x650f0ccd41c8f8d5ULL;
  static const uint64_t static_value2 = 0x3ada80be6ddde434ULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_service_test/TestSrvRequest";
  }

  static const char* value(const  ::tf_service_test::TestSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 request\n\
\n\
";
  }

  static const char* value(const  ::tf_service_test::TestSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tf_service_test::TestSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf_service_test::TestSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf_service_test::TestSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf_service_test::TestSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d659793f93a48ba20550bc00329c3355";
  }

  static const char* value(const  ::tf_service_test::TestSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd659793f93a48ba2ULL;
  static const uint64_t static_value2 = 0x0550bc00329c3355ULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_service_test::TestSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_service_test/TestSrvResponse";
  }

  static const char* value(const  ::tf_service_test::TestSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf_service_test::TestSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 height\n\
int32 width\n\
int32[] kinect_map\n\
\n\
\n\
";
  }

  static const char* value(const  ::tf_service_test::TestSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf_service_test::TestSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf_service_test::TestSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.height);
    stream.next(m.width);
    stream.next(m.kinect_map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tf_service_test::TestSrv> {
  static const char* value() 
  {
    return "57e40f56f94dc9c5c0bad06f1ba3cdc3";
  }

  static const char* value(const tf_service_test::TestSrv&) { return value(); } 
};

template<>
struct DataType<tf_service_test::TestSrv> {
  static const char* value() 
  {
    return "tf_service_test/TestSrv";
  }

  static const char* value(const tf_service_test::TestSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf_service_test::TestSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57e40f56f94dc9c5c0bad06f1ba3cdc3";
  }

  static const char* value(const tf_service_test::TestSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf_service_test::TestSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_service_test/TestSrv";
  }

  static const char* value(const tf_service_test::TestSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf_service_test::TestSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57e40f56f94dc9c5c0bad06f1ba3cdc3";
  }

  static const char* value(const tf_service_test::TestSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf_service_test::TestSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_service_test/TestSrv";
  }

  static const char* value(const tf_service_test::TestSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TF_SERVICE_TEST_SERVICE_TESTSRV_H

