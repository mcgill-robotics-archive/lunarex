/* Auto-generated by genmsg_cpp for file /home/lunarex/McGill_LunarEx_2013/ROS_workspace/kinect_node/srv/KinectData.srv */
#ifndef KINECT_NODE_SERVICE_KINECTDATA_H
#define KINECT_NODE_SERVICE_KINECTDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace kinect_node
{
template <class ContainerAllocator>
struct KinectDataRequest_ {
  typedef KinectDataRequest_<ContainerAllocator> Type;

  KinectDataRequest_()
  : request(0)
  {
  }

  KinectDataRequest_(const ContainerAllocator& _alloc)
  : request(0)
  {
  }

  typedef int32_t _request_type;
  int32_t request;


  typedef boost::shared_ptr< ::kinect_node::KinectDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_node::KinectDataRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KinectDataRequest
typedef  ::kinect_node::KinectDataRequest_<std::allocator<void> > KinectDataRequest;

typedef boost::shared_ptr< ::kinect_node::KinectDataRequest> KinectDataRequestPtr;
typedef boost::shared_ptr< ::kinect_node::KinectDataRequest const> KinectDataRequestConstPtr;


template <class ContainerAllocator>
struct KinectDataResponse_ {
  typedef KinectDataResponse_<ContainerAllocator> Type;

  KinectDataResponse_()
  : height(0)
  , width(0)
  , data()
  {
  }

  KinectDataResponse_(const ContainerAllocator& _alloc)
  : height(0)
  , width(0)
  , data(_alloc)
  {
  }

  typedef int32_t _height_type;
  int32_t height;

  typedef int32_t _width_type;
  int32_t width;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  data;


  typedef boost::shared_ptr< ::kinect_node::KinectDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_node::KinectDataResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KinectDataResponse
typedef  ::kinect_node::KinectDataResponse_<std::allocator<void> > KinectDataResponse;

typedef boost::shared_ptr< ::kinect_node::KinectDataResponse> KinectDataResponsePtr;
typedef boost::shared_ptr< ::kinect_node::KinectDataResponse const> KinectDataResponseConstPtr;

struct KinectData
{

typedef KinectDataRequest Request;
typedef KinectDataResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct KinectData
} // namespace kinect_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_node::KinectDataRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_node::KinectDataRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_node::KinectDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "650f0ccd41c8f8d53ada80be6ddde434";
  }

  static const char* value(const  ::kinect_node::KinectDataRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x650f0ccd41c8f8d5ULL;
  static const uint64_t static_value2 = 0x3ada80be6ddde434ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_node::KinectDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_node/KinectDataRequest";
  }

  static const char* value(const  ::kinect_node::KinectDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_node::KinectDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 request\n\
\n\
";
  }

  static const char* value(const  ::kinect_node::KinectDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kinect_node::KinectDataRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_node::KinectDataResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_node::KinectDataResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_node::KinectDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f360b69cf5d7dfa0f84a65e379e7e74";
  }

  static const char* value(const  ::kinect_node::KinectDataResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f360b69cf5d7dfaULL;
  static const uint64_t static_value2 = 0x0f84a65e379e7e74ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_node::KinectDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_node/KinectDataResponse";
  }

  static const char* value(const  ::kinect_node::KinectDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_node::KinectDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 height\n\
int32 width\n\
int32[] data\n\
\n\
\n\
";
  }

  static const char* value(const  ::kinect_node::KinectDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_node::KinectDataRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectDataRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_node::KinectDataResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.height);
    stream.next(m.width);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinectDataResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<kinect_node::KinectData> {
  static const char* value() 
  {
    return "5eacc836fed57135e6fd765882abe88f";
  }

  static const char* value(const kinect_node::KinectData&) { return value(); } 
};

template<>
struct DataType<kinect_node::KinectData> {
  static const char* value() 
  {
    return "kinect_node/KinectData";
  }

  static const char* value(const kinect_node::KinectData&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kinect_node::KinectDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5eacc836fed57135e6fd765882abe88f";
  }

  static const char* value(const kinect_node::KinectDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kinect_node::KinectDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_node/KinectData";
  }

  static const char* value(const kinect_node::KinectDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kinect_node::KinectDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5eacc836fed57135e6fd765882abe88f";
  }

  static const char* value(const kinect_node::KinectDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kinect_node::KinectDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_node/KinectData";
  }

  static const char* value(const kinect_node::KinectDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KINECT_NODE_SERVICE_KINECTDATA_H

