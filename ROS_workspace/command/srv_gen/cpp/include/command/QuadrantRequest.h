/* Auto-generated by genmsg_cpp for file /home/ernie/McGill_LunarEx_2013/ROS_workspace/command/srv/QuadrantRequest.srv */
#ifndef COMMAND_SERVICE_QUADRANTREQUEST_H
#define COMMAND_SERVICE_QUADRANTREQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace command
{
template <class ContainerAllocator>
struct QuadrantRequestRequest_ {
  typedef QuadrantRequestRequest_<ContainerAllocator> Type;

  QuadrantRequestRequest_()
  {
  }

  QuadrantRequestRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::command::QuadrantRequestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::command::QuadrantRequestRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QuadrantRequestRequest
typedef  ::command::QuadrantRequestRequest_<std::allocator<void> > QuadrantRequestRequest;

typedef boost::shared_ptr< ::command::QuadrantRequestRequest> QuadrantRequestRequestPtr;
typedef boost::shared_ptr< ::command::QuadrantRequestRequest const> QuadrantRequestRequestConstPtr;


template <class ContainerAllocator>
struct QuadrantRequestResponse_ {
  typedef QuadrantRequestResponse_<ContainerAllocator> Type;

  QuadrantRequestResponse_()
  : quadrant(0)
  {
  }

  QuadrantRequestResponse_(const ContainerAllocator& _alloc)
  : quadrant(0)
  {
  }

  typedef uint8_t _quadrant_type;
  uint8_t quadrant;


  typedef boost::shared_ptr< ::command::QuadrantRequestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::command::QuadrantRequestResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QuadrantRequestResponse
typedef  ::command::QuadrantRequestResponse_<std::allocator<void> > QuadrantRequestResponse;

typedef boost::shared_ptr< ::command::QuadrantRequestResponse> QuadrantRequestResponsePtr;
typedef boost::shared_ptr< ::command::QuadrantRequestResponse const> QuadrantRequestResponseConstPtr;

struct QuadrantRequest
{

typedef QuadrantRequestRequest Request;
typedef QuadrantRequestResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct QuadrantRequest
} // namespace command

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::command::QuadrantRequestRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::command::QuadrantRequestRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::command::QuadrantRequestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::command::QuadrantRequestRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::command::QuadrantRequestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "command/QuadrantRequestRequest";
  }

  static const char* value(const  ::command::QuadrantRequestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::command::QuadrantRequestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::command::QuadrantRequestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::command::QuadrantRequestRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::command::QuadrantRequestResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::command::QuadrantRequestResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::command::QuadrantRequestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eca501e934cd757be612cae2f964dc45";
  }

  static const char* value(const  ::command::QuadrantRequestResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeca501e934cd757bULL;
  static const uint64_t static_value2 = 0xe612cae2f964dc45ULL;
};

template<class ContainerAllocator>
struct DataType< ::command::QuadrantRequestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "command/QuadrantRequestResponse";
  }

  static const char* value(const  ::command::QuadrantRequestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::command::QuadrantRequestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 quadrant\n\
\n\
";
  }

  static const char* value(const  ::command::QuadrantRequestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::command::QuadrantRequestResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::command::QuadrantRequestRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QuadrantRequestRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::command::QuadrantRequestResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.quadrant);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QuadrantRequestResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<command::QuadrantRequest> {
  static const char* value() 
  {
    return "eca501e934cd757be612cae2f964dc45";
  }

  static const char* value(const command::QuadrantRequest&) { return value(); } 
};

template<>
struct DataType<command::QuadrantRequest> {
  static const char* value() 
  {
    return "command/QuadrantRequest";
  }

  static const char* value(const command::QuadrantRequest&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<command::QuadrantRequestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eca501e934cd757be612cae2f964dc45";
  }

  static const char* value(const command::QuadrantRequestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<command::QuadrantRequestRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "command/QuadrantRequest";
  }

  static const char* value(const command::QuadrantRequestRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<command::QuadrantRequestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eca501e934cd757be612cae2f964dc45";
  }

  static const char* value(const command::QuadrantRequestResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<command::QuadrantRequestResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "command/QuadrantRequest";
  }

  static const char* value(const command::QuadrantRequestResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COMMAND_SERVICE_QUADRANTREQUEST_H

