#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import math

NODE_NAME = 'lidar_localization'
import roslib; roslib.load_manifest(NODE_NAME)
import rospy

from sensor_msgs.msg import *

class Point(object):
	def __init__(self, theta, r):
		self.theta = float(theta)
		self.r = float(r)
		self.x = math.sin(math.radians(self.theta)) * self.r
		self.y = math.cos(math.radians(self.theta)) * self.r
		self.weight = abs(self.r)**(1.5)	
		
	def __str__(self):
		return "Point with angle: " + str(self.theta) + " and distance: " + str(self.r) + "\n X coord: " + str(self.x) + " and Y coord: " + str(self.y)
	
class Line(object):
	
	def __init__(self, r, theta):
		self.theta = float(theta)
		self.r = float(r)  # negative line R <---------- 0 -------------> positive lineR, along x axis
		self.points = []
		self.pointCount = 0
		self.weight = 0
		
	def addPoint(self, p):
		self.points.append(p)
		self.pointCount += 1
		#v1.5 added weight calculation
		self.weight += p.weight
		
	def getClosestPoint(self, cloudSize):
		pts = sorted(self.points, key=lambda p: p.r, reverse=False)
		if(cloudSize >= len(self.points)):
			return pts[0]			
		return pts[cloudSize / 2]  # median

	def __str__(self):
		s = "Line has " + str(self.pointCount) + " points at distance r= " + str(self.r) + " with angle theta = " + str(self.theta)
		return s


class Scan(object):#degrees
	def __init__(self, m):
		self.minAngleRad = m.angle_min
		self.maxAngleRad = m.angle_max
		self.angleIncRad = m.angle_increment
		self.minAngleDeg = math.degrees(self.minAngleRad)
		self.maxAngleDeg = math.degrees(self.maxAngleRad)
		self.angleIncDeg = math.degrees(self.angleIncRad)
		self.points = []
		for i in range (len(m.ranges)):
			self.pointAngleDeg = self.minAngleDeg + i*self.angleIncDeg #point angle in degrees
			self.points.append(Point(self.pointAngleDeg, m.ranges[i]))

class HoughMatrix(object):
	
	def __init__(self, points, maxLineR, RIncr, minTheta, maxTheta, thetaIncr):
		self.points = points
		self.maxLineR = maxLineR  # in metres
		self.RIncr = RIncr
		self.minTheta = minTheta #cannot be negative
		self.maxTheta = maxTheta #cannot be negative
		self.thetaIncr = thetaIncr
		self.lines = []
		
		self.columnRank = int((math.fabs(minTheta) + math.fabs(maxTheta)) / thetaIncr) 
		self.rowRank = int(maxLineR / RIncr)

		# hough matrix containing line object in each entry
		self.H = [[Line(0, 0) for theta in xrange(self.columnRank)] for r in xrange(self.rowRank)] 
		
		# hough matrix containing point count in each entry
		self.Hlight = [[0 for theta in xrange(self.columnRank)] for r in xrange(self.rowRank)] 

		for point in self.points:
			t = minTheta
			while(t <= maxTheta):
				lineR = point.x * math.cos(math.radians(t)) + point.y * math.sin(math.radians(t))
				if(lineR<0):
					t+=thetaIncr
					continue
				
				#to avoid indexing outside matrix. Need {t/thetaIncr <= columnRank} <=> {t<=columnRank*thetaIncr} (same for R)
				if(lineR < (self.rowRank * RIncr) and t < (self.columnRank * thetaIncr)):  
					
					# Principle of indexing here is that each matrix index is an integer, but t & r can increment by a fraction
					# Actual value  ||  Matrix index
					# 	lineR 		||	lineR / RIncr
					#   t			|| 	t / thetaIncr  (note float() and int() used to get precise division results, not just quotient from possible integer division)
					
					if(self.H[int(lineR / float(RIncr))][int(t / float(thetaIncr))].r == 0):  # line not created
						self.H[int(lineR / float(RIncr))][int(t / float(thetaIncr))] = Line(lineR, t)  
					
					self.H[int(lineR / float(RIncr))][int(t / float(thetaIncr))].addPoint(point)  # add point, increments line counter
					self.Hlight[int(lineR / float(RIncr))][int(t / float(thetaIncr))] += 1
				
				t += thetaIncr
				
		for r in xrange(self.rowRank):
			for theta in xrange(self.columnRank):
				if(self.H[r][theta].r != 0 and self.H[r][theta].pointCount != 0):  # ATTN: changed from if(self.H[r][theta].r!=0
					self.lines.append(self.H[r][theta])
	
	def getMostPopulatedLineInThetaRange(self, startTheta, endTheta):
		if(startTheta < self.minTheta or endTheta > self.maxTheta):
			return -1
			
		out = Line(0,0)
		currentMax = 0
		for r in xrange(self.rowRank):
			for t in xrange(startTheta, endTheta, 1):
				l=self.H[r][int(t / float(self.thetaIncr))]
				if(l.pointCount > currentMax):
					currentMax = l.pointCount
					out = l
		 
		return out
	
	def getNMostPopulatedLines(self, N):
		return self.getSortedLines()[:N]
		
		
	# Very basic localization method
	# 1) Aligns Hough transform lines to arena using heading
	# 2) Filters data to focus on walls; Approx 0, 90, 180 degrees
	# 3) Calculate average of distance to walls
	# 4) Subtract from arena length and width to obtain position relative to lower left corner
	# Works on points A,B and D
	# Will need better than "most populated" lines to work with point C
	def getLocation(self, heading, arenaLength, arenaWidth):
		arenaX = []
		arenaY = []
		# origin is in lower left corner
		
		# Use N most populated lines to calculate location
		for l in self.getSortedLines()[:30]:
		#for l in self.getWeightSortedLines()[:30]:
			
			# Align lidar with map using heading so readings point towards backpanel
			mapAngle = l.theta + heading
			# print l
			# print abs(l.r)
			
			# Filter X/Y data based on angle to walls
			if (mapAngle >= 85) and (mapAngle <= 95):
					arenaY.append(abs(l.r))	
			if (heading <= 0):
				if (mapAngle > 0) and  (mapAngle <= 10):
					arenaX.append(abs(l.r))				
			else:
				if (mapAngle > 170) and  (mapAngle <= 180):
					arenaX.append(-abs(l.r))
					arenaWidth = 0	
						
		xPosition = arenaWidth - mean(arenaX)
		yPosition = arenaLength - mean(arenaY)
		if(yPosition < 0):
			yPosition = 0
		#print arenaY
		#print mean(arenaY)
					
		#print "Lidar is at: "
		#print xPosition , yPosition
		#print len(self.lines)
		#print "\n"
		
		p = Point(0,0)
		p.x = xPosition
		p.y = yPosition
		return p
	
	def getSortedLines(self):
		return sorted(self.lines, key=lambda l: l.pointCount, reverse=True)
	
	def getWeightSortedLines(self):
		return sorted(self.lines, key=lambda l: l.weight, reverse=True)
	
	def getNMostWeightedLines(self, N):
		return self.getWeightSortedLines()[:N]

